extend ../../layouts/nested-2
block main
	h2.flex-title verifyAttribute()
	p
		| The <code>verifyAttribute()</code> method maps directly to
		| <a href="http://webdriver.io/api/property/getAttribute.html">getAttribute() method</a> on WebdriverIO.
	p
		| The attribute of the HTML element you're looking for will always be the assert key in your <code>"asserts"</code>
		| object. Consider the following element (any HTML element will work, we chose an <code>input</code>):
	.element-area
		input.test(id="input1", required, type="text", data-type="test")
		pre.language-markup.line-numbers
			code
				| &lt;input class="test" id="input1" required type="text" data-type="test" /&gt;
	p
		| if you wanted to verify that the <code>input</code> field had the type of <code>text</code>, you could do the
		| following:
	pre.language-javascript.line-numbers
		code
			| {
			|   "selector": "#input1",
			|   "verify": [
			|     {
			|       "method": "verifyAttribute",
			|       "asserts": {
			|         "type": "text"
			|       }
			|     }
			|   ]
			| }
	p
		| Let's say that we wanted to make sure the <code>disabled</code> attribute doesn't exist on our input. We could
		| make sure that was the case with:
	pre.language-javascript.line-numbers
		code
			| {
			|   "selector": "#input1",
			|   "verify": [
			|     {
			|       "method": "verifyAttribute",
			|       "asserts": {
			|         "disabled": null
			|       }
			|     }
			|   ]
			| }
	p
		| We can also test for boolean HTML attributes, so I can make sure that <code>input</code> has a
		| <code>required</code> attribute on it.
	pre.language-javascript.line-numbers
		code
			| {
			|   "selector": "#input1",
			|   "verify": [
			|     {
			|       "method": "verifyAttribute",
			|       "asserts": {
			|         "required": true
			|       }
			|     }
			|   ]
			| }
	p In fact, here is a test that we have for the <code>input</code> element on this page.
	pre.language-javascript.line-numbers
		code
			| 'use strict';
			| <br>
			| var drive = require('datadriver');
			| <br>
			| drive.verify({
			|   "steps": [
			|     {
			|       "execute": [
			|         {
			|           "action": "redirect",
			|           "page": "api/verify/verifyAttribute.html"
			|         }
			|       ]
			|     },
			|     {
			|       "selector": "#input1",
			|       "verify": [
			|         {
			|           "method": "verifyAttribute",
			|           "asserts": {
			|             "disabled": null,
			|             "required": true,
			|             "data-type": "test",
			|             "class": "test",
			|             "type": "text"
			|           }
			|         }
			|       ]
			|     }
			|   ]
			| });
	p And this is our expected output:
	pre.language-bash.line-numbers
		code
			| $ grunt webdriver:verify --url=http://datadriver.io
			| Running "webdriver:verify" (webdriver) task
			| <br>
			| ⚙ redirecting to http://datadriver.io/api/verify/verifyAttribute.html
			| ✓ the "disabled" attribute of "#input1" should equal "null"
			| ✓ the "required" attribute of "#input1" should equal "true"
			| ✓ the "data-type" attribute of "#input1" should equal "test"
			| ✓ the "class" attribute of "#input1" should equal "test"
			| ✓ the "type" attribute of "#input1" should equal "text"
			| <br>
			| 5 passing
	hr
	h2.flex-title Call verifyAttribute() directly
	p
		| You can also call <code>verifyAttribute()</code> directly in your tests for even greater flexibility. The
		| method takes an object with four keys. For example, this test is verifying the <code>class</code> attribute
		| on the <code>#input1</code> element (visible on this page).
	pre.language-javascript.line-numbers
		code
			| 'use strict';
			| <br>
			| var drive = require('datadriver');
			| <br>
			| drive.verifyAttribute({
			|   selector: '#input1',
			|   assertKey: 'class',
			|   assert: 'test',
			|   mode: [ 'equal' ]
			| });
	p
		| The <code>mode</code> key is an array because we can pass multiple ChaiJS modes to our test. Modes should be
		| read with a prefix of <i>should</i>, since we're using the <code>should</code> interface from ChaiJS. For example,
		| if we wanted to assert that the <code>class</code> was not equal to <code>"error"</code>, then we could do this:
	pre.language-javascript.line-numbers
		code
			| 'use strict';
			| <br>
			| var drive = require('datadriver');
			| <br>
			| drive.verifyAttribute({
			|   selector: '#input1',
			|   assertKey: 'class',
			|   assert: 'error',
			|   mode: [ 'not', 'equal' ]
			| });
	p We can also set the <a href="/api/extras/assert-modes/">assert mode</a> in our data structures.