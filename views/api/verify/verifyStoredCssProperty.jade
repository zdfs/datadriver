extend ../../layouts/nested-2
block main
	h2.flex-title verifyStoredCssProperty()
	p
		| The <code>verifyStoredCssProperty()</code> method serves a specialized use case. Not all CSS property values
		| are going to be static. Sometimes, especially in the case of Responsive Web Design where you might be testing
		| in multiple viewport sizes, CSS values like <code>height</code> and <code>width</code> will be dynamic. Most of
		| the time, you're not going to care to test these dynamic properties because they're always going to behave as
		| expected, but there are special exceptions.
	p
		| We're going to take a look at a grid and how we could make sure that we have tests that ensure the grid is
		| working correctly.
	.element-area
		.grid
			#column1.grid--half
				p hello!
			#column2.grid--half
				p hi!
	p
		| Responsive grids will have a dynamic width, so the CSS computed property for <code>width</code> will change
		| based on how large your viewport is. We need a way to get the values we're looking for no matter what size the
		| viewport may be and to use those values in our <code>"asserts"</code> object. We're going to use a special
		| <code>execute</code> action called <code>evalAndStore</code> to execute some JavaScript during our test and
		| store the value in the browser's local storage, giving it a unique name we can retrieve later with
		| <code>verifyStoredCssProperty()</code>. Let's see what a simple test like that would look like.
	pre.language-javascript.line-numbers
		code
			| 'use strict';
			| <br>
			| var drive = require('datadriver');
			| <br>
			| drive.verify({
			| <br>
			|   "steps": [
			|     {
			|       "execute": [
			|         {
			|           "action": "redirect",
			|           "page": "api/verify/verifyStoredCssProperty.html"
			|         }
			|       ]
			|     },
			|     {
			|       "selector": ".#column1",
			|       "execute": [
			|         {
			|           "action": "evalAndStore",
			|           "script": "return Math.round(parseInt(window.getComputedStyle(document.querySelector('#column1')).width, 10))",
			|           "resultKey": "column1-width"
			|         }
			|       ]
			|     },
			|     {
			|     "selector": "#column2",
			|       "verify": [
			|         {
			|           "method": "verifyStoredCssProperty",
			|           "asserts": {
			|             "width": "column1-width"
			|           }
			|         }
			|       ]
			|     },
			|     {
			|       "execute": [
			|         {
			|           "action": "setViewportSize",
			|           "height": 1000,
			|           "width": 400
			|         }
			|       ]
			|     },
			|     {
			|       "selector": ".#column1",
			|       "execute": [
			|         {
			|           "action": "evalAndStore",
			|           "script": "return Math.round(parseInt(window.getComputedStyle(document.querySelector('#column1')).width, 10))",
			|           "resultKey": "column1-width"
			|         }
			|       ]
			|     },
			|     {
			|       "selector": "#column2",
			|       "verify": [
			|         {
			|           "method": "verifyStoredCssProperty",
			|           "asserts": {
			|             "width": "column1-width"
			|           }
			|         }
			|       ]
			|     }
			|   ]
			| <br>
			| });
	p And this is our expected output:
	pre.language-bash.line-numbers
		code
			| $ grunt webdriver:verify --url=http://datadriver.io
			| Running "webdriver:verify" (webdriver) task
			| <br>
			| ⚙ redirecting to http://datadriver.io/api/verify/verifyStoredCssProperty.html
			| ⚙ executing javascript and storing the result in local storage.
			| ⚙ Retrieving values from local storage...
			| ⚙ Reading values...
			| ✓ the "width" property of "#column2" should equal the local storage value in key "column1-width"
			| ⚙ giving the viewport a height of 1000 and a width of 400
			| ⚙ executing javascript and storing the result in local storage.
			| ⚙ Retrieving values from local storage...
			| ⚙ Reading values...
			| ✓ the "width" property of "#column2" should equal the local storage value in key "column1-width"
			| <br>
			| 2 passing
	p
		| So what have we done here, exactly? Well, we know the window size changed and our test still passed. In both
		| viewport sizes, we executed some JavaScript to get the computed width of the first column and stored the value to
		| local storage using a key that we defined. Once we had that value, we selected the second column and asserted
		| that its width was equal to the value we stored in local storage for the first column.
	p Fancy.
	hr
	h2.flex-title Calling verifyStoredCssProperty() directly
	p
		| To be perfectly clear, the <code>verifyStoredCssProperty()</code> method <b>must</b> be used in conjunction with
		| the <code>evalAndStore</code> action. We can't verify a stored value without first storing it. Obvi. So let's see
		| an example of that.
	pre.language-bash.line-numbers
		code
			| drive.execute({
			|   "execute": {
			|     "action": "evalAndStore",
			|     "script": "return Math.round(parseInt(window.getComputedStyle(document.querySelector('#column1')).width, 10))",
			|     "resultKey": "column1-width"
			|   }
			| });
			| <br>
			| drive.verifyStoredCssProperty({
			|   selector: '#column2',
			|   assertKey: 'width',
			|   assert: 'column1-width',
			|   mode: [ 'equal' ]
			| });